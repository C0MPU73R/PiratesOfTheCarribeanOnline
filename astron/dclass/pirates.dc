from direct.distributed import DistributedObjectGlobal
from pirates.uberdog import ClientServicesManager/UD
from pirates.distributed import PiratesDistrict/AI
from pirates.pirate import DistributedPlayerPirate/AI/UD

struct PotentialPirate {
  uint32 avNum;
  string avName;
  string avDNA;
  uint8 avPosition;
  uint8 aname;
};

struct AvatarType {
  int8 faction;
  int8 track;
  int8 id;
  uint8 boss;
};

dclass DistributedObjectGlobal : DistributedObject {
};

dclass ClientServicesManager : DistributedObjectGlobal {
  login(string cookie) clsend;
  acceptLogin();

  requestAvatars() clsend;
  setAvatars(PotentialPirate[]);

  createAvatar(blob dna, uint8 index) clsend;
  createAvatarResp(uint32 avId);

  chooseAvatar(uint32 avId) clsend;
  avatarResponse(uint32 avId, blob avdata);
};

dclass PiratesDistrict : DistributedDistrict {
  setParentingRules(string, string) broadcast ram;
  setAvatarCount(uint32) broadcast required;
  setNewAvatarCount(uint32) broadcast required;
  setMainWorld(string) broadcast required;
  setShardType(uint8) broadcast required ram;
  setStats : setAvatarCount, setNewAvatarCount;
  setPopulationLimits(uint16, uint16);
};